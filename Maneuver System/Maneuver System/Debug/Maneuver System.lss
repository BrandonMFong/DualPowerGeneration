
Maneuver System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000836  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000008aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d02  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ee  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ff  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000615  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000432  00000000  00000000  00002cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000030df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
   4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  7c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  80:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  84:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  88:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  8c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  90:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  94:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  98:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  9c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  a0:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  a4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  a8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  ac:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  b0:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  b4:	e2 00       	.word	0x00e2	; ????
  b6:	d0 00       	.word	0x00d0	; ????
  b8:	d2 00       	.word	0x00d2	; ????
  ba:	d4 00       	.word	0x00d4	; ????
  bc:	d6 00       	.word	0x00d6	; ????
  be:	d8 00       	.word	0x00d8	; ????
  c0:	da 00       	.word	0x00da	; ????
  c2:	dc 00       	.word	0x00dc	; ????
  c4:	de 00       	.word	0x00de	; ????

000000c6 <__ctors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a7 30       	cpi	r26, 0x07	; 7
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  e6:	0c 94 19 04 	jmp	0x832	; 0x832 <_exit>

000000ea <__bad_interrupt>:
  ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <_Z8adc_readh>:

uint16_t adc_read(uint8_t channel){
	
	channel &= 0b00000111;
	
	ADMUX = (ADMUX & 0xF8) | channel;
  ee:	ec e7       	ldi	r30, 0x7C	; 124
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	98 7f       	andi	r25, 0xF8	; 248
  f6:	87 70       	andi	r24, 0x07	; 7
  f8:	89 2b       	or	r24, r25
  fa:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC));
 106:	80 81       	ld	r24, Z
 108:	86 fd       	sbrc	r24, 6
 10a:	fd cf       	rjmp	.-6      	; 0x106 <_Z8adc_readh+0x18>
	
	return ADC;
 10c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 110:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 114:	08 95       	ret

00000116 <_Z8adc_Initv>:

void adc_Init(){
	//select Vcc and select ADC1 as input
	ADMUX = (1<<REFS0); 
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 122:	08 95       	ret

00000124 <_Z13uart_TransmitPc>:
}

void uart_Transmit(char data[]){
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	dc 01       	movw	r26, r24
 12a:	9c 01       	movw	r18, r24
 12c:	2a 5f       	subi	r18, 0xFA	; 250
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int i = 0; i < 6; i++){
		while(!(UCSR0A & (1<<UDRE0)));      //wait for register to be free
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];
 134:	c6 ec       	ldi	r28, 0xC6	; 198
 136:	d0 e0       	ldi	r29, 0x00	; 0
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
}

void uart_Transmit(char data[]){
	for(int i = 0; i < 6; i++){
		while(!(UCSR0A & (1<<UDRE0)));      //wait for register to be free
 138:	90 81       	ld	r25, Z
 13a:	95 ff       	sbrs	r25, 5
 13c:	fd cf       	rjmp	.-6      	; 0x138 <_Z13uart_TransmitPc+0x14>
		UDR0 = data[i];
 13e:	8d 91       	ld	r24, X+
 140:	88 83       	st	Y, r24
	
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
}

void uart_Transmit(char data[]){
	for(int i = 0; i < 6; i++){
 142:	a2 17       	cp	r26, r18
 144:	b3 07       	cpc	r27, r19
 146:	c1 f7       	brne	.-16     	; 0x138 <_Z13uart_TransmitPc+0x14>
		while(!(UCSR0A & (1<<UDRE0)));      //wait for register to be free
		UDR0 = data[i];
	}
	
	while(!(UCSR0A & (1<<UDRE0))); 
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	85 ff       	sbrs	r24, 5
 150:	fd cf       	rjmp	.-6      	; 0x14c <_Z13uart_TransmitPc+0x28>
	UDR0 = ' ';
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
	for(int i = 0; i < 6; i++) value[i] = ' ';
 158:	e0 e0       	ldi	r30, 0x00	; 0
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	80 83       	st	Z, r24
 15e:	81 83       	std	Z+1, r24	; 0x01
 160:	82 83       	std	Z+2, r24	; 0x02
 162:	83 83       	std	Z+3, r24	; 0x03
 164:	84 83       	std	Z+4, r24	; 0x04
 166:	85 83       	std	Z+5, r24	; 0x05
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <_Z9uart_Initv>:

void uart_Init(){
	UBRR0H = (BAUDRATE>>8);				 //shift register to the right by 8 bits
 16e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = BAUDRATE;					 //set baud rate
 172:	87 e6       	ldi	r24, 0x67	; 103
 174:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);   //enable receiver and transmitter
 178:	e1 ec       	ldi	r30, 0xC1	; 193
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	88 61       	ori	r24, 0x18	; 24
 180:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01); //8 bit data format
 182:	e2 ec       	ldi	r30, 0xC2	; 194
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	86 60       	ori	r24, 0x06	; 6
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <_Z7getChari>:
	word[6] = '\0';
}

char getChar(int digit){
	
	switch(digit)
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	89 30       	cpi	r24, 0x09	; 9
 192:	91 05       	cpc	r25, r1
 194:	a8 f4       	brcc	.+42     	; 0x1c0 <_Z7getChari+0x32>
 196:	86 5a       	subi	r24, 0xA6	; 166
 198:	9f 4f       	sbci	r25, 0xFF	; 255
 19a:	fc 01       	movw	r30, r24
 19c:	0c 94 13 04 	jmp	0x826	; 0x826 <__tablejump2__>
	{
		case 1: return '1';
		case 2: return '2';
 1a0:	82 e3       	ldi	r24, 0x32	; 50
 1a2:	08 95       	ret
		case 3: return '3';
 1a4:	83 e3       	ldi	r24, 0x33	; 51
 1a6:	08 95       	ret
		case 4: return '4';
 1a8:	84 e3       	ldi	r24, 0x34	; 52
 1aa:	08 95       	ret
		case 5: return '5';
 1ac:	85 e3       	ldi	r24, 0x35	; 53
 1ae:	08 95       	ret
		case 6: return '6';
 1b0:	86 e3       	ldi	r24, 0x36	; 54
 1b2:	08 95       	ret
		case 7: return '7';
 1b4:	87 e3       	ldi	r24, 0x37	; 55
 1b6:	08 95       	ret
		case 8: return '8';
 1b8:	88 e3       	ldi	r24, 0x38	; 56
 1ba:	08 95       	ret
		case 9: return '9';
 1bc:	89 e3       	ldi	r24, 0x39	; 57
 1be:	08 95       	ret
		default: return '0';
 1c0:	80 e3       	ldi	r24, 0x30	; 48
 1c2:	08 95       	ret

char getChar(int digit){
	
	switch(digit)
	{
		case 1: return '1';
 1c4:	81 e3       	ldi	r24, 0x31	; 49
		case 7: return '7';
		case 8: return '8';
		case 9: return '9';
		default: return '0';
	}
}
 1c6:	08 95       	ret

000001c8 <_Z15convertToStringiPc>:
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);   //enable receiver and transmitter
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01); //8 bit data format
}

void convertToString(int16_t voltage, char word[])
{
 1c8:	4f 92       	push	r4
 1ca:	5f 92       	push	r5
 1cc:	6f 92       	push	r6
 1ce:	7f 92       	push	r7
 1d0:	8f 92       	push	r8
 1d2:	9f 92       	push	r9
 1d4:	af 92       	push	r10
 1d6:	bf 92       	push	r11
 1d8:	cf 92       	push	r12
 1da:	df 92       	push	r13
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	4b 01       	movw	r8, r22
	double number = voltage;
 1ea:	bc 01       	movw	r22, r24
 1ec:	99 0f       	add	r25, r25
 1ee:	88 0b       	sbc	r24, r24
 1f0:	99 0b       	sbc	r25, r25
 1f2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__floatsisf>
 1f6:	6b 01       	movw	r12, r22
 1f8:	7c 01       	movw	r14, r24
	int divisionCount = 0;
	int digit;
	
	if(number < 0) number *= -1;
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	a9 01       	movw	r20, r18
 200:	0e 94 42 02 	call	0x484	; 0x484 <__cmpsf2>
 204:	88 23       	and	r24, r24
 206:	24 f4       	brge	.+8      	; 0x210 <_Z15convertToStringiPc+0x48>
 208:	f7 fa       	bst	r15, 7
 20a:	f0 94       	com	r15
 20c:	f7 f8       	bld	r15, 7
 20e:	f0 94       	com	r15
	
	while(number >= 1){
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e8       	ldi	r20, 0x80	; 128
 216:	5f e3       	ldi	r21, 0x3F	; 63
 218:	c7 01       	movw	r24, r14
 21a:	b6 01       	movw	r22, r12
 21c:	0e 94 a1 03 	call	0x742	; 0x742 <__gesf2>
 220:	88 23       	and	r24, r24
 222:	f4 f1       	brlt	.+124    	; 0x2a0 <_Z15convertToStringiPc+0xd8>
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	d0 e0       	ldi	r29, 0x00	; 0
		 number = number / 10;
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	40 e2       	ldi	r20, 0x20	; 32
 22e:	51 e4       	ldi	r21, 0x41	; 65
 230:	c7 01       	movw	r24, r14
 232:	b6 01       	movw	r22, r12
 234:	0e 94 47 02 	call	0x48e	; 0x48e <__divsf3>
 238:	6b 01       	movw	r12, r22
 23a:	7c 01       	movw	r14, r24
		 divisionCount++;
 23c:	21 96       	adiw	r28, 0x01	; 1
	int divisionCount = 0;
	int digit;
	
	if(number < 0) number *= -1;
	
	while(number >= 1){
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 e8       	ldi	r20, 0x80	; 128
 244:	5f e3       	ldi	r21, 0x3F	; 63
 246:	0e 94 a1 03 	call	0x742	; 0x742 <__gesf2>
 24a:	88 23       	and	r24, r24
 24c:	6c f7       	brge	.-38     	; 0x228 <_Z15convertToStringiPc+0x60>
 24e:	2b c0       	rjmp	.+86     	; 0x2a6 <_Z15convertToStringiPc+0xde>
		 number = number / 10;
		 divisionCount++;
	}
	for(int i = 0; i < divisionCount && i < 6; i++){
 250:	a0 16       	cp	r10, r16
 252:	b1 06       	cpc	r11, r17
 254:	29 f1       	breq	.+74     	; 0x2a0 <_Z15convertToStringiPc+0xd8>
		
		number = number * 10;
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e2       	ldi	r20, 0x20	; 32
 25c:	51 e4       	ldi	r21, 0x41	; 65
 25e:	c7 01       	movw	r24, r14
 260:	b6 01       	movw	r22, r12
 262:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
 266:	6b 01       	movw	r12, r22
 268:	7c 01       	movw	r14, r24
		digit = (int)number;
 26a:	0e 94 b9 02 	call	0x572	; 0x572 <__fixsfsi>
 26e:	2b 01       	movw	r4, r22
 270:	3c 01       	movw	r6, r24
		number = number - digit;
 272:	07 2e       	mov	r0, r23
 274:	00 0c       	add	r0, r0
 276:	88 0b       	sbc	r24, r24
 278:	99 0b       	sbc	r25, r25
 27a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__floatsisf>
 27e:	9b 01       	movw	r18, r22
 280:	ac 01       	movw	r20, r24
 282:	c7 01       	movw	r24, r14
 284:	b6 01       	movw	r22, r12
 286:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__subsf3>
 28a:	6b 01       	movw	r12, r22
 28c:	7c 01       	movw	r14, r24
		word[i] = getChar(digit);
 28e:	c2 01       	movw	r24, r4
 290:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z7getChari>
 294:	f8 01       	movw	r30, r16
 296:	81 93       	st	Z+, r24
 298:	8f 01       	movw	r16, r30
	
	while(number >= 1){
		 number = number / 10;
		 divisionCount++;
	}
	for(int i = 0; i < divisionCount && i < 6; i++){
 29a:	ce 17       	cp	r28, r30
 29c:	df 07       	cpc	r29, r31
 29e:	c1 f6       	brne	.-80     	; 0x250 <_Z15convertToStringiPc+0x88>
		digit = (int)number;
		number = number - digit;
		word[i] = getChar(digit);
	}
	
	word[6] = '\0';
 2a0:	f4 01       	movw	r30, r8
 2a2:	16 82       	std	Z+6, r1	; 0x06
}
 2a4:	0b c0       	rjmp	.+22     	; 0x2bc <_Z15convertToStringiPc+0xf4>
	
	while(number >= 1){
		 number = number / 10;
		 divisionCount++;
	}
	for(int i = 0; i < divisionCount && i < 6; i++){
 2a6:	1c 16       	cp	r1, r28
 2a8:	1d 06       	cpc	r1, r29
 2aa:	d4 f7       	brge	.-12     	; 0x2a0 <_Z15convertToStringiPc+0xd8>
 2ac:	84 01       	movw	r16, r8
 2ae:	c8 0d       	add	r28, r8
 2b0:	d9 1d       	adc	r29, r9
 2b2:	54 01       	movw	r10, r8
 2b4:	f6 e0       	ldi	r31, 0x06	; 6
 2b6:	af 0e       	add	r10, r31
 2b8:	b1 1c       	adc	r11, r1
 2ba:	cd cf       	rjmp	.-102    	; 0x256 <_Z15convertToStringiPc+0x8e>
		number = number - digit;
		word[i] = getChar(digit);
	}
	
	word[6] = '\0';
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	bf 90       	pop	r11
 2ce:	af 90       	pop	r10
 2d0:	9f 90       	pop	r9
 2d2:	8f 90       	pop	r8
 2d4:	7f 90       	pop	r7
 2d6:	6f 90       	pop	r6
 2d8:	5f 90       	pop	r5
 2da:	4f 90       	pop	r4
 2dc:	08 95       	ret

000002de <_Z18moveLinearActuatorv>:
	
	PINB |= (1<<PINB5); //toggle LED
	//We done ;)
}

void moveLinearActuator(){
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
	
	int16_t v0;
	int16_t v1;
	int16_t difference;
	
	v0 = adc_read(R0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 77 00 	call	0xee	; 0xee <_Z8adc_readh>
 2ec:	ec 01       	movw	r28, r24
	convertToString(v0, value);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	71 e0       	ldi	r23, 0x01	; 1
 2f2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z15convertToStringiPc>
	uart_Transmit(value);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 92 00 	call	0x124	; 0x124 <_Z13uart_TransmitPc>
	
	v1 = adc_read(R1);
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 77 00 	call	0xee	; 0xee <_Z8adc_readh>
 304:	8c 01       	movw	r16, r24
	convertToString(v1, value);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	71 e0       	ldi	r23, 0x01	; 1
 30a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z15convertToStringiPc>
	uart_Transmit(value);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 92 00 	call	0x124	; 0x124 <_Z13uart_TransmitPc>
	
	difference = v0 - v1;
 316:	c0 1b       	sub	r28, r16
 318:	d1 0b       	sbc	r29, r17
	
	convertToString(difference, value);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	71 e0       	ldi	r23, 0x01	; 1
 31e:	ce 01       	movw	r24, r28
 320:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z15convertToStringiPc>
	uart_Transmit(value);
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 92 00 	call	0x124	; 0x124 <_Z13uart_TransmitPc>
	
	if(difference > 50) PORTD &= ~(1 << PORTD3);
 32c:	c3 33       	cpi	r28, 0x33	; 51
 32e:	d1 05       	cpc	r29, r1
 330:	14 f0       	brlt	.+4      	; 0x336 <_Z18moveLinearActuatorv+0x58>
 332:	5b 98       	cbi	0x0b, 3	; 11
 334:	05 c0       	rjmp	.+10     	; 0x340 <_Z18moveLinearActuatorv+0x62>
	else if(difference < -50) PORTD &= ~(1 << PORTD2);
 336:	ce 3c       	cpi	r28, 0xCE	; 206
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	d8 07       	cpc	r29, r24
 33c:	0c f4       	brge	.+2      	; 0x340 <_Z18moveLinearActuatorv+0x62>
 33e:	5a 98       	cbi	0x0b, 2	; 11
	
	while(difference < -50 || difference > 50){
 340:	e2 96       	adiw	r28, 0x32	; 50
 342:	c5 36       	cpi	r28, 0x65	; 101
 344:	d1 05       	cpc	r29, r1
 346:	68 f0       	brcs	.+26     	; 0x362 <_Z18moveLinearActuatorv+0x84>
		v0 = adc_read(R0);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 77 00 	call	0xee	; 0xee <_Z8adc_readh>
 34e:	ec 01       	movw	r28, r24
		v1 = adc_read(R1);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 77 00 	call	0xee	; 0xee <_Z8adc_readh>
	uart_Transmit(value);
	
	if(difference > 50) PORTD &= ~(1 << PORTD3);
	else if(difference < -50) PORTD &= ~(1 << PORTD2);
	
	while(difference < -50 || difference > 50){
 356:	c8 1b       	sub	r28, r24
 358:	d9 0b       	sbc	r29, r25
 35a:	e2 96       	adiw	r28, 0x32	; 50
 35c:	c5 36       	cpi	r28, 0x65	; 101
 35e:	d1 05       	cpc	r29, r1
 360:	98 f7       	brcc	.-26     	; 0x348 <_Z18moveLinearActuatorv+0x6a>
		v1 = adc_read(R1);
		difference = v0 - v1;
	}
	
	//PORTD &= ~((1 << PORTD2) | (1 << PORTD3));
	PORTD |= (1 << PORTD3) | (1 << PORTD2);
 362:	8b b1       	in	r24, 0x0b	; 11
 364:	8c 60       	ori	r24, 0x0C	; 12
 366:	8b b9       	out	0x0b, r24	; 11
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	08 95       	ret

00000372 <_Z16startManeuveringv>:
	}
}

void startManeuvering(){
	
	PINB |= (1<<PINB5); //toggle LED
 372:	1d 9a       	sbi	0x03, 5	; 3
	
	moveLinearActuator();
 374:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z18moveLinearActuatorv>
	//moveTheOtherMotorWhoseNameIDontKnow(v1,v3);
	
	PINB |= (1<<PINB5); //toggle LED
 378:	1d 9a       	sbi	0x03, 5	; 3
 37a:	08 95       	ret

0000037c <main>:

int main(void)
{
	//Init
	
	DDRB |= (1 << DDRB5);  //Set portB 5 as output LED
 37c:	25 9a       	sbi	0x04, 5	; 4
	DDRD |= (1 << DDD2) | (1 << DDD3);
 37e:	8a b1       	in	r24, 0x0a	; 10
 380:	8c 60       	ori	r24, 0x0C	; 12
 382:	8a b9       	out	0x0a, r24	; 10
	
	DDRB &= ~(1<<DDRB7);   //Set portB 7 as input
 384:	27 98       	cbi	0x04, 7	; 4
	DDRC &= ~((1<<DDRC0) | (1 << DDRC1));
 386:	87 b1       	in	r24, 0x07	; 7
 388:	8c 7f       	andi	r24, 0xFC	; 252
 38a:	87 b9       	out	0x07, r24	; 7
	
	PORTD |= (1 << PORTD3) | (1 << PORTD2);
 38c:	8b b1       	in	r24, 0x0b	; 11
 38e:	8c 60       	ori	r24, 0x0C	; 12
 390:	8b b9       	out	0x0b, r24	; 11

	uart_Init();
 392:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z9uart_Initv>
	adc_Init();
 396:	0e 94 8b 00 	call	0x116	; 0x116 <_Z8adc_Initv>
	
	sei();
 39a:	78 94       	sei
	while (1) {
		if(!(PINB & (1<<PINB7))) // PINB7 is low (Button has been pressed)
 39c:	1f 99       	sbic	0x03, 7	; 3
 39e:	fe cf       	rjmp	.-4      	; 0x39c <main+0x20>
		{
			while(!(PINB & (1<<PINB7)));
 3a0:	1f 9b       	sbis	0x03, 7	; 3
 3a2:	fe cf       	rjmp	.-4      	; 0x3a0 <main+0x24>
			
			startManeuvering();
 3a4:	0e 94 b9 01 	call	0x372	; 0x372 <_Z16startManeuveringv>
 3a8:	f9 cf       	rjmp	.-14     	; 0x39c <main+0x20>

000003aa <__subsf3>:
 3aa:	50 58       	subi	r21, 0x80	; 128

000003ac <__addsf3>:
 3ac:	bb 27       	eor	r27, r27
 3ae:	aa 27       	eor	r26, r26
 3b0:	0e 94 ed 01 	call	0x3da	; 0x3da <__addsf3x>
 3b4:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_round>
 3b8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 3bc:	38 f0       	brcs	.+14     	; 0x3cc <__addsf3+0x20>
 3be:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 3c2:	20 f0       	brcs	.+8      	; 0x3cc <__addsf3+0x20>
 3c4:	39 f4       	brne	.+14     	; 0x3d4 <__addsf3+0x28>
 3c6:	9f 3f       	cpi	r25, 0xFF	; 255
 3c8:	19 f4       	brne	.+6      	; 0x3d0 <__addsf3+0x24>
 3ca:	26 f4       	brtc	.+8      	; 0x3d4 <__addsf3+0x28>
 3cc:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_nan>
 3d0:	0e f4       	brtc	.+2      	; 0x3d4 <__addsf3+0x28>
 3d2:	e0 95       	com	r30
 3d4:	e7 fb       	bst	r30, 7
 3d6:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>

000003da <__addsf3x>:
 3da:	e9 2f       	mov	r30, r25
 3dc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 3e0:	58 f3       	brcs	.-42     	; 0x3b8 <__addsf3+0xc>
 3e2:	ba 17       	cp	r27, r26
 3e4:	62 07       	cpc	r22, r18
 3e6:	73 07       	cpc	r23, r19
 3e8:	84 07       	cpc	r24, r20
 3ea:	95 07       	cpc	r25, r21
 3ec:	20 f0       	brcs	.+8      	; 0x3f6 <__addsf3x+0x1c>
 3ee:	79 f4       	brne	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f0:	a6 f5       	brtc	.+104    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 3f2:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_zero>
 3f6:	0e f4       	brtc	.+2      	; 0x3fa <__addsf3x+0x20>
 3f8:	e0 95       	com	r30
 3fa:	0b 2e       	mov	r0, r27
 3fc:	ba 2f       	mov	r27, r26
 3fe:	a0 2d       	mov	r26, r0
 400:	0b 01       	movw	r0, r22
 402:	b9 01       	movw	r22, r18
 404:	90 01       	movw	r18, r0
 406:	0c 01       	movw	r0, r24
 408:	ca 01       	movw	r24, r20
 40a:	a0 01       	movw	r20, r0
 40c:	11 24       	eor	r1, r1
 40e:	ff 27       	eor	r31, r31
 410:	59 1b       	sub	r21, r25
 412:	99 f0       	breq	.+38     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 414:	59 3f       	cpi	r21, 0xF9	; 249
 416:	50 f4       	brcc	.+20     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 418:	50 3e       	cpi	r21, 0xE0	; 224
 41a:	68 f1       	brcs	.+90     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 41c:	1a 16       	cp	r1, r26
 41e:	f0 40       	sbci	r31, 0x00	; 0
 420:	a2 2f       	mov	r26, r18
 422:	23 2f       	mov	r18, r19
 424:	34 2f       	mov	r19, r20
 426:	44 27       	eor	r20, r20
 428:	58 5f       	subi	r21, 0xF8	; 248
 42a:	f3 cf       	rjmp	.-26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 42c:	46 95       	lsr	r20
 42e:	37 95       	ror	r19
 430:	27 95       	ror	r18
 432:	a7 95       	ror	r26
 434:	f0 40       	sbci	r31, 0x00	; 0
 436:	53 95       	inc	r21
 438:	c9 f7       	brne	.-14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 43a:	7e f4       	brtc	.+30     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 43c:	1f 16       	cp	r1, r31
 43e:	ba 0b       	sbc	r27, r26
 440:	62 0b       	sbc	r22, r18
 442:	73 0b       	sbc	r23, r19
 444:	84 0b       	sbc	r24, r20
 446:	ba f0       	brmi	.+46     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 448:	91 50       	subi	r25, 0x01	; 1
 44a:	a1 f0       	breq	.+40     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 44c:	ff 0f       	add	r31, r31
 44e:	bb 1f       	adc	r27, r27
 450:	66 1f       	adc	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	c2 f7       	brpl	.-16     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 458:	0e c0       	rjmp	.+28     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 45a:	ba 0f       	add	r27, r26
 45c:	62 1f       	adc	r22, r18
 45e:	73 1f       	adc	r23, r19
 460:	84 1f       	adc	r24, r20
 462:	48 f4       	brcc	.+18     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 464:	87 95       	ror	r24
 466:	77 95       	ror	r23
 468:	67 95       	ror	r22
 46a:	b7 95       	ror	r27
 46c:	f7 95       	ror	r31
 46e:	9e 3f       	cpi	r25, 0xFE	; 254
 470:	08 f0       	brcs	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	b0 cf       	rjmp	.-160    	; 0x3d4 <__addsf3+0x28>
 474:	93 95       	inc	r25
 476:	88 0f       	add	r24, r24
 478:	08 f0       	brcs	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	99 27       	eor	r25, r25
 47c:	ee 0f       	add	r30, r30
 47e:	97 95       	ror	r25
 480:	87 95       	ror	r24
 482:	08 95       	ret

00000484 <__cmpsf2>:
 484:	0e 94 2c 03 	call	0x658	; 0x658 <__fp_cmp>
 488:	08 f4       	brcc	.+2      	; 0x48c <__cmpsf2+0x8>
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret

0000048e <__divsf3>:
 48e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3x>
 492:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_round>
 496:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 49a:	58 f0       	brcs	.+22     	; 0x4b2 <__divsf3+0x24>
 49c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 4a0:	40 f0       	brcs	.+16     	; 0x4b2 <__divsf3+0x24>
 4a2:	29 f4       	brne	.+10     	; 0x4ae <__divsf3+0x20>
 4a4:	5f 3f       	cpi	r21, 0xFF	; 255
 4a6:	29 f0       	breq	.+10     	; 0x4b2 <__divsf3+0x24>
 4a8:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 4ac:	51 11       	cpse	r21, r1
 4ae:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 4b2:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_nan>

000004b6 <__divsf3x>:
 4b6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 4ba:	68 f3       	brcs	.-38     	; 0x496 <__divsf3+0x8>

000004bc <__divsf3_pse>:
 4bc:	99 23       	and	r25, r25
 4be:	b1 f3       	breq	.-20     	; 0x4ac <__divsf3+0x1e>
 4c0:	55 23       	and	r21, r21
 4c2:	91 f3       	breq	.-28     	; 0x4a8 <__divsf3+0x1a>
 4c4:	95 1b       	sub	r25, r21
 4c6:	55 0b       	sbc	r21, r21
 4c8:	bb 27       	eor	r27, r27
 4ca:	aa 27       	eor	r26, r26
 4cc:	62 17       	cp	r22, r18
 4ce:	73 07       	cpc	r23, r19
 4d0:	84 07       	cpc	r24, r20
 4d2:	38 f0       	brcs	.+14     	; 0x4e2 <__divsf3_pse+0x26>
 4d4:	9f 5f       	subi	r25, 0xFF	; 255
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255
 4d8:	22 0f       	add	r18, r18
 4da:	33 1f       	adc	r19, r19
 4dc:	44 1f       	adc	r20, r20
 4de:	aa 1f       	adc	r26, r26
 4e0:	a9 f3       	breq	.-22     	; 0x4cc <__divsf3_pse+0x10>
 4e2:	35 d0       	rcall	.+106    	; 0x54e <__divsf3_pse+0x92>
 4e4:	0e 2e       	mov	r0, r30
 4e6:	3a f0       	brmi	.+14     	; 0x4f6 <__divsf3_pse+0x3a>
 4e8:	e0 e8       	ldi	r30, 0x80	; 128
 4ea:	32 d0       	rcall	.+100    	; 0x550 <__divsf3_pse+0x94>
 4ec:	91 50       	subi	r25, 0x01	; 1
 4ee:	50 40       	sbci	r21, 0x00	; 0
 4f0:	e6 95       	lsr	r30
 4f2:	00 1c       	adc	r0, r0
 4f4:	ca f7       	brpl	.-14     	; 0x4e8 <__divsf3_pse+0x2c>
 4f6:	2b d0       	rcall	.+86     	; 0x54e <__divsf3_pse+0x92>
 4f8:	fe 2f       	mov	r31, r30
 4fa:	29 d0       	rcall	.+82     	; 0x54e <__divsf3_pse+0x92>
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	88 1f       	adc	r24, r24
 502:	bb 1f       	adc	r27, r27
 504:	26 17       	cp	r18, r22
 506:	37 07       	cpc	r19, r23
 508:	48 07       	cpc	r20, r24
 50a:	ab 07       	cpc	r26, r27
 50c:	b0 e8       	ldi	r27, 0x80	; 128
 50e:	09 f0       	breq	.+2      	; 0x512 <__divsf3_pse+0x56>
 510:	bb 0b       	sbc	r27, r27
 512:	80 2d       	mov	r24, r0
 514:	bf 01       	movw	r22, r30
 516:	ff 27       	eor	r31, r31
 518:	93 58       	subi	r25, 0x83	; 131
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	3a f0       	brmi	.+14     	; 0x52c <__divsf3_pse+0x70>
 51e:	9e 3f       	cpi	r25, 0xFE	; 254
 520:	51 05       	cpc	r21, r1
 522:	78 f0       	brcs	.+30     	; 0x542 <__divsf3_pse+0x86>
 524:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 528:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 52c:	5f 3f       	cpi	r21, 0xFF	; 255
 52e:	e4 f3       	brlt	.-8      	; 0x528 <__divsf3_pse+0x6c>
 530:	98 3e       	cpi	r25, 0xE8	; 232
 532:	d4 f3       	brlt	.-12     	; 0x528 <__divsf3_pse+0x6c>
 534:	86 95       	lsr	r24
 536:	77 95       	ror	r23
 538:	67 95       	ror	r22
 53a:	b7 95       	ror	r27
 53c:	f7 95       	ror	r31
 53e:	9f 5f       	subi	r25, 0xFF	; 255
 540:	c9 f7       	brne	.-14     	; 0x534 <__divsf3_pse+0x78>
 542:	88 0f       	add	r24, r24
 544:	91 1d       	adc	r25, r1
 546:	96 95       	lsr	r25
 548:	87 95       	ror	r24
 54a:	97 f9       	bld	r25, 7
 54c:	08 95       	ret
 54e:	e1 e0       	ldi	r30, 0x01	; 1
 550:	66 0f       	add	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	bb 1f       	adc	r27, r27
 558:	62 17       	cp	r22, r18
 55a:	73 07       	cpc	r23, r19
 55c:	84 07       	cpc	r24, r20
 55e:	ba 07       	cpc	r27, r26
 560:	20 f0       	brcs	.+8      	; 0x56a <__divsf3_pse+0xae>
 562:	62 1b       	sub	r22, r18
 564:	73 0b       	sbc	r23, r19
 566:	84 0b       	sbc	r24, r20
 568:	ba 0b       	sbc	r27, r26
 56a:	ee 1f       	adc	r30, r30
 56c:	88 f7       	brcc	.-30     	; 0x550 <__divsf3_pse+0x94>
 56e:	e0 95       	com	r30
 570:	08 95       	ret

00000572 <__fixsfsi>:
 572:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
 576:	68 94       	set
 578:	b1 11       	cpse	r27, r1
 57a:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 57e:	08 95       	ret

00000580 <__fixunssfsi>:
 580:	0e 94 80 03 	call	0x700	; 0x700 <__fp_splitA>
 584:	88 f0       	brcs	.+34     	; 0x5a8 <__fixunssfsi+0x28>
 586:	9f 57       	subi	r25, 0x7F	; 127
 588:	98 f0       	brcs	.+38     	; 0x5b0 <__fixunssfsi+0x30>
 58a:	b9 2f       	mov	r27, r25
 58c:	99 27       	eor	r25, r25
 58e:	b7 51       	subi	r27, 0x17	; 23
 590:	b0 f0       	brcs	.+44     	; 0x5be <__fixunssfsi+0x3e>
 592:	e1 f0       	breq	.+56     	; 0x5cc <__fixunssfsi+0x4c>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	1a f0       	brmi	.+6      	; 0x5a4 <__fixunssfsi+0x24>
 59e:	ba 95       	dec	r27
 5a0:	c9 f7       	brne	.-14     	; 0x594 <__fixunssfsi+0x14>
 5a2:	14 c0       	rjmp	.+40     	; 0x5cc <__fixunssfsi+0x4c>
 5a4:	b1 30       	cpi	r27, 0x01	; 1
 5a6:	91 f0       	breq	.+36     	; 0x5cc <__fixunssfsi+0x4c>
 5a8:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_zero>
 5ac:	b1 e0       	ldi	r27, 0x01	; 1
 5ae:	08 95       	ret
 5b0:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_zero>
 5b4:	67 2f       	mov	r22, r23
 5b6:	78 2f       	mov	r23, r24
 5b8:	88 27       	eor	r24, r24
 5ba:	b8 5f       	subi	r27, 0xF8	; 248
 5bc:	39 f0       	breq	.+14     	; 0x5cc <__fixunssfsi+0x4c>
 5be:	b9 3f       	cpi	r27, 0xF9	; 249
 5c0:	cc f3       	brlt	.-14     	; 0x5b4 <__fixunssfsi+0x34>
 5c2:	86 95       	lsr	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b3 95       	inc	r27
 5ca:	d9 f7       	brne	.-10     	; 0x5c2 <__fixunssfsi+0x42>
 5cc:	3e f4       	brtc	.+14     	; 0x5dc <__fixunssfsi+0x5c>
 5ce:	90 95       	com	r25
 5d0:	80 95       	com	r24
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	8f 4f       	sbci	r24, 0xFF	; 255
 5da:	9f 4f       	sbci	r25, 0xFF	; 255
 5dc:	08 95       	ret

000005de <__floatunsisf>:
 5de:	e8 94       	clt
 5e0:	09 c0       	rjmp	.+18     	; 0x5f4 <__floatsisf+0x12>

000005e2 <__floatsisf>:
 5e2:	97 fb       	bst	r25, 7
 5e4:	3e f4       	brtc	.+14     	; 0x5f4 <__floatsisf+0x12>
 5e6:	90 95       	com	r25
 5e8:	80 95       	com	r24
 5ea:	70 95       	com	r23
 5ec:	61 95       	neg	r22
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	8f 4f       	sbci	r24, 0xFF	; 255
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	99 23       	and	r25, r25
 5f6:	a9 f0       	breq	.+42     	; 0x622 <__floatsisf+0x40>
 5f8:	f9 2f       	mov	r31, r25
 5fa:	96 e9       	ldi	r25, 0x96	; 150
 5fc:	bb 27       	eor	r27, r27
 5fe:	93 95       	inc	r25
 600:	f6 95       	lsr	r31
 602:	87 95       	ror	r24
 604:	77 95       	ror	r23
 606:	67 95       	ror	r22
 608:	b7 95       	ror	r27
 60a:	f1 11       	cpse	r31, r1
 60c:	f8 cf       	rjmp	.-16     	; 0x5fe <__floatsisf+0x1c>
 60e:	fa f4       	brpl	.+62     	; 0x64e <__floatsisf+0x6c>
 610:	bb 0f       	add	r27, r27
 612:	11 f4       	brne	.+4      	; 0x618 <__floatsisf+0x36>
 614:	60 ff       	sbrs	r22, 0
 616:	1b c0       	rjmp	.+54     	; 0x64e <__floatsisf+0x6c>
 618:	6f 5f       	subi	r22, 0xFF	; 255
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	8f 4f       	sbci	r24, 0xFF	; 255
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	16 c0       	rjmp	.+44     	; 0x64e <__floatsisf+0x6c>
 622:	88 23       	and	r24, r24
 624:	11 f0       	breq	.+4      	; 0x62a <__floatsisf+0x48>
 626:	96 e9       	ldi	r25, 0x96	; 150
 628:	11 c0       	rjmp	.+34     	; 0x64c <__floatsisf+0x6a>
 62a:	77 23       	and	r23, r23
 62c:	21 f0       	breq	.+8      	; 0x636 <__floatsisf+0x54>
 62e:	9e e8       	ldi	r25, 0x8E	; 142
 630:	87 2f       	mov	r24, r23
 632:	76 2f       	mov	r23, r22
 634:	05 c0       	rjmp	.+10     	; 0x640 <__floatsisf+0x5e>
 636:	66 23       	and	r22, r22
 638:	71 f0       	breq	.+28     	; 0x656 <__floatsisf+0x74>
 63a:	96 e8       	ldi	r25, 0x86	; 134
 63c:	86 2f       	mov	r24, r22
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	2a f0       	brmi	.+10     	; 0x64e <__floatsisf+0x6c>
 644:	9a 95       	dec	r25
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	da f7       	brpl	.-10     	; 0x644 <__floatsisf+0x62>
 64e:	88 0f       	add	r24, r24
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	97 f9       	bld	r25, 7
 656:	08 95       	ret

00000658 <__fp_cmp>:
 658:	99 0f       	add	r25, r25
 65a:	00 08       	sbc	r0, r0
 65c:	55 0f       	add	r21, r21
 65e:	aa 0b       	sbc	r26, r26
 660:	e0 e8       	ldi	r30, 0x80	; 128
 662:	fe ef       	ldi	r31, 0xFE	; 254
 664:	16 16       	cp	r1, r22
 666:	17 06       	cpc	r1, r23
 668:	e8 07       	cpc	r30, r24
 66a:	f9 07       	cpc	r31, r25
 66c:	c0 f0       	brcs	.+48     	; 0x69e <__fp_cmp+0x46>
 66e:	12 16       	cp	r1, r18
 670:	13 06       	cpc	r1, r19
 672:	e4 07       	cpc	r30, r20
 674:	f5 07       	cpc	r31, r21
 676:	98 f0       	brcs	.+38     	; 0x69e <__fp_cmp+0x46>
 678:	62 1b       	sub	r22, r18
 67a:	73 0b       	sbc	r23, r19
 67c:	84 0b       	sbc	r24, r20
 67e:	95 0b       	sbc	r25, r21
 680:	39 f4       	brne	.+14     	; 0x690 <__fp_cmp+0x38>
 682:	0a 26       	eor	r0, r26
 684:	61 f0       	breq	.+24     	; 0x69e <__fp_cmp+0x46>
 686:	23 2b       	or	r18, r19
 688:	24 2b       	or	r18, r20
 68a:	25 2b       	or	r18, r21
 68c:	21 f4       	brne	.+8      	; 0x696 <__fp_cmp+0x3e>
 68e:	08 95       	ret
 690:	0a 26       	eor	r0, r26
 692:	09 f4       	brne	.+2      	; 0x696 <__fp_cmp+0x3e>
 694:	a1 40       	sbci	r26, 0x01	; 1
 696:	a6 95       	lsr	r26
 698:	8f ef       	ldi	r24, 0xFF	; 255
 69a:	81 1d       	adc	r24, r1
 69c:	81 1d       	adc	r24, r1
 69e:	08 95       	ret

000006a0 <__fp_inf>:
 6a0:	97 f9       	bld	r25, 7
 6a2:	9f 67       	ori	r25, 0x7F	; 127
 6a4:	80 e8       	ldi	r24, 0x80	; 128
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	60 e0       	ldi	r22, 0x00	; 0
 6aa:	08 95       	ret

000006ac <__fp_nan>:
 6ac:	9f ef       	ldi	r25, 0xFF	; 255
 6ae:	80 ec       	ldi	r24, 0xC0	; 192
 6b0:	08 95       	ret

000006b2 <__fp_pscA>:
 6b2:	00 24       	eor	r0, r0
 6b4:	0a 94       	dec	r0
 6b6:	16 16       	cp	r1, r22
 6b8:	17 06       	cpc	r1, r23
 6ba:	18 06       	cpc	r1, r24
 6bc:	09 06       	cpc	r0, r25
 6be:	08 95       	ret

000006c0 <__fp_pscB>:
 6c0:	00 24       	eor	r0, r0
 6c2:	0a 94       	dec	r0
 6c4:	12 16       	cp	r1, r18
 6c6:	13 06       	cpc	r1, r19
 6c8:	14 06       	cpc	r1, r20
 6ca:	05 06       	cpc	r0, r21
 6cc:	08 95       	ret

000006ce <__fp_round>:
 6ce:	09 2e       	mov	r0, r25
 6d0:	03 94       	inc	r0
 6d2:	00 0c       	add	r0, r0
 6d4:	11 f4       	brne	.+4      	; 0x6da <__fp_round+0xc>
 6d6:	88 23       	and	r24, r24
 6d8:	52 f0       	brmi	.+20     	; 0x6ee <__fp_round+0x20>
 6da:	bb 0f       	add	r27, r27
 6dc:	40 f4       	brcc	.+16     	; 0x6ee <__fp_round+0x20>
 6de:	bf 2b       	or	r27, r31
 6e0:	11 f4       	brne	.+4      	; 0x6e6 <__fp_round+0x18>
 6e2:	60 ff       	sbrs	r22, 0
 6e4:	04 c0       	rjmp	.+8      	; 0x6ee <__fp_round+0x20>
 6e6:	6f 5f       	subi	r22, 0xFF	; 255
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	08 95       	ret

000006f0 <__fp_split3>:
 6f0:	57 fd       	sbrc	r21, 7
 6f2:	90 58       	subi	r25, 0x80	; 128
 6f4:	44 0f       	add	r20, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	59 f0       	breq	.+22     	; 0x710 <__fp_splitA+0x10>
 6fa:	5f 3f       	cpi	r21, 0xFF	; 255
 6fc:	71 f0       	breq	.+28     	; 0x71a <__fp_splitA+0x1a>
 6fe:	47 95       	ror	r20

00000700 <__fp_splitA>:
 700:	88 0f       	add	r24, r24
 702:	97 fb       	bst	r25, 7
 704:	99 1f       	adc	r25, r25
 706:	61 f0       	breq	.+24     	; 0x720 <__fp_splitA+0x20>
 708:	9f 3f       	cpi	r25, 0xFF	; 255
 70a:	79 f0       	breq	.+30     	; 0x72a <__fp_splitA+0x2a>
 70c:	87 95       	ror	r24
 70e:	08 95       	ret
 710:	12 16       	cp	r1, r18
 712:	13 06       	cpc	r1, r19
 714:	14 06       	cpc	r1, r20
 716:	55 1f       	adc	r21, r21
 718:	f2 cf       	rjmp	.-28     	; 0x6fe <__fp_split3+0xe>
 71a:	46 95       	lsr	r20
 71c:	f1 df       	rcall	.-30     	; 0x700 <__fp_splitA>
 71e:	08 c0       	rjmp	.+16     	; 0x730 <__fp_splitA+0x30>
 720:	16 16       	cp	r1, r22
 722:	17 06       	cpc	r1, r23
 724:	18 06       	cpc	r1, r24
 726:	99 1f       	adc	r25, r25
 728:	f1 cf       	rjmp	.-30     	; 0x70c <__fp_splitA+0xc>
 72a:	86 95       	lsr	r24
 72c:	71 05       	cpc	r23, r1
 72e:	61 05       	cpc	r22, r1
 730:	08 94       	sec
 732:	08 95       	ret

00000734 <__fp_zero>:
 734:	e8 94       	clt

00000736 <__fp_szero>:
 736:	bb 27       	eor	r27, r27
 738:	66 27       	eor	r22, r22
 73a:	77 27       	eor	r23, r23
 73c:	cb 01       	movw	r24, r22
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

00000742 <__gesf2>:
 742:	0e 94 2c 03 	call	0x658	; 0x658 <__fp_cmp>
 746:	08 f4       	brcc	.+2      	; 0x74a <__gesf2+0x8>
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__mulsf3>:
 74c:	0e 94 b9 03 	call	0x772	; 0x772 <__mulsf3x>
 750:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__fp_round>
 754:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__fp_pscA>
 758:	38 f0       	brcs	.+14     	; 0x768 <__mulsf3+0x1c>
 75a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fp_pscB>
 75e:	20 f0       	brcs	.+8      	; 0x768 <__mulsf3+0x1c>
 760:	95 23       	and	r25, r21
 762:	11 f0       	breq	.+4      	; 0x768 <__mulsf3+0x1c>
 764:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 768:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__fp_nan>
 76c:	11 24       	eor	r1, r1
 76e:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>

00000772 <__mulsf3x>:
 772:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_split3>
 776:	70 f3       	brcs	.-36     	; 0x754 <__mulsf3+0x8>

00000778 <__mulsf3_pse>:
 778:	95 9f       	mul	r25, r21
 77a:	c1 f3       	breq	.-16     	; 0x76c <__mulsf3+0x20>
 77c:	95 0f       	add	r25, r21
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	55 1f       	adc	r21, r21
 782:	62 9f       	mul	r22, r18
 784:	f0 01       	movw	r30, r0
 786:	72 9f       	mul	r23, r18
 788:	bb 27       	eor	r27, r27
 78a:	f0 0d       	add	r31, r0
 78c:	b1 1d       	adc	r27, r1
 78e:	63 9f       	mul	r22, r19
 790:	aa 27       	eor	r26, r26
 792:	f0 0d       	add	r31, r0
 794:	b1 1d       	adc	r27, r1
 796:	aa 1f       	adc	r26, r26
 798:	64 9f       	mul	r22, r20
 79a:	66 27       	eor	r22, r22
 79c:	b0 0d       	add	r27, r0
 79e:	a1 1d       	adc	r26, r1
 7a0:	66 1f       	adc	r22, r22
 7a2:	82 9f       	mul	r24, r18
 7a4:	22 27       	eor	r18, r18
 7a6:	b0 0d       	add	r27, r0
 7a8:	a1 1d       	adc	r26, r1
 7aa:	62 1f       	adc	r22, r18
 7ac:	73 9f       	mul	r23, r19
 7ae:	b0 0d       	add	r27, r0
 7b0:	a1 1d       	adc	r26, r1
 7b2:	62 1f       	adc	r22, r18
 7b4:	83 9f       	mul	r24, r19
 7b6:	a0 0d       	add	r26, r0
 7b8:	61 1d       	adc	r22, r1
 7ba:	22 1f       	adc	r18, r18
 7bc:	74 9f       	mul	r23, r20
 7be:	33 27       	eor	r19, r19
 7c0:	a0 0d       	add	r26, r0
 7c2:	61 1d       	adc	r22, r1
 7c4:	23 1f       	adc	r18, r19
 7c6:	84 9f       	mul	r24, r20
 7c8:	60 0d       	add	r22, r0
 7ca:	21 1d       	adc	r18, r1
 7cc:	82 2f       	mov	r24, r18
 7ce:	76 2f       	mov	r23, r22
 7d0:	6a 2f       	mov	r22, r26
 7d2:	11 24       	eor	r1, r1
 7d4:	9f 57       	subi	r25, 0x7F	; 127
 7d6:	50 40       	sbci	r21, 0x00	; 0
 7d8:	9a f0       	brmi	.+38     	; 0x800 <__mulsf3_pse+0x88>
 7da:	f1 f0       	breq	.+60     	; 0x818 <__mulsf3_pse+0xa0>
 7dc:	88 23       	and	r24, r24
 7de:	4a f0       	brmi	.+18     	; 0x7f2 <__mulsf3_pse+0x7a>
 7e0:	ee 0f       	add	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	bb 1f       	adc	r27, r27
 7e6:	66 1f       	adc	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	a9 f7       	brne	.-22     	; 0x7dc <__mulsf3_pse+0x64>
 7f2:	9e 3f       	cpi	r25, 0xFE	; 254
 7f4:	51 05       	cpc	r21, r1
 7f6:	80 f0       	brcs	.+32     	; 0x818 <__mulsf3_pse+0xa0>
 7f8:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_inf>
 7fc:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 800:	5f 3f       	cpi	r21, 0xFF	; 255
 802:	e4 f3       	brlt	.-8      	; 0x7fc <__mulsf3_pse+0x84>
 804:	98 3e       	cpi	r25, 0xE8	; 232
 806:	d4 f3       	brlt	.-12     	; 0x7fc <__mulsf3_pse+0x84>
 808:	86 95       	lsr	r24
 80a:	77 95       	ror	r23
 80c:	67 95       	ror	r22
 80e:	b7 95       	ror	r27
 810:	f7 95       	ror	r31
 812:	e7 95       	ror	r30
 814:	9f 5f       	subi	r25, 0xFF	; 255
 816:	c1 f7       	brne	.-16     	; 0x808 <__mulsf3_pse+0x90>
 818:	fe 2b       	or	r31, r30
 81a:	88 0f       	add	r24, r24
 81c:	91 1d       	adc	r25, r1
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	97 f9       	bld	r25, 7
 824:	08 95       	ret

00000826 <__tablejump2__>:
 826:	ee 0f       	add	r30, r30
 828:	ff 1f       	adc	r31, r31
 82a:	05 90       	lpm	r0, Z+
 82c:	f4 91       	lpm	r31, Z
 82e:	e0 2d       	mov	r30, r0
 830:	09 94       	ijmp

00000832 <_exit>:
 832:	f8 94       	cli

00000834 <__stop_program>:
 834:	ff cf       	rjmp	.-2      	; 0x834 <__stop_program>
