
Maneuver System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000772  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000007e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba4  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c8  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000429  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002db  00000000  00000000  000028ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002b89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
   4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  7c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  80:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  84:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  88:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  8c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  90:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  94:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  98:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  9c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  a0:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  a4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  a8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  ac:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  b0:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  b4:	da 00       	.word	0x00da	; ????
  b6:	c8 00       	.word	0x00c8	; ????
  b8:	ca 00       	.word	0x00ca	; ????
  ba:	cc 00       	.word	0x00cc	; ????
  bc:	ce 00       	.word	0x00ce	; ????
  be:	d0 00       	.word	0x00d0	; ????
  c0:	d2 00       	.word	0x00d2	; ????
  c2:	d4 00       	.word	0x00d4	; ????
  c4:	d6 00       	.word	0x00d6	; ????

000000c6 <__ctors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a9 30       	cpi	r26, 0x09	; 9
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
  e6:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_exit>

000000ea <__bad_interrupt>:
  ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <_Z8adc_readh>:

uint16_t adc_read(uint8_t channel){
	
	channel &= 0b00000111;
	
	ADMUX = (ADMUX & 0xF8) | channel;
  ee:	ec e7       	ldi	r30, 0x7C	; 124
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	98 7f       	andi	r25, 0xF8	; 248
  f6:	87 70       	andi	r24, 0x07	; 7
  f8:	89 2b       	or	r24, r25
  fa:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC));
 106:	80 81       	ld	r24, Z
 108:	86 fd       	sbrc	r24, 6
 10a:	fd cf       	rjmp	.-6      	; 0x106 <_Z8adc_readh+0x18>
	
	return ADC;
 10c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 110:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 114:	08 95       	ret

00000116 <_Z8adc_Initv>:

void adc_Init(){
	//select Vcc and select ADC1 as input
	ADMUX = (1<<REFS0); 
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 122:	08 95       	ret

00000124 <_Z13uart_TransmitPc>:
}

void uart_Transmit(char data[]){
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	dc 01       	movw	r26, r24
 12a:	9c 01       	movw	r18, r24
 12c:	2a 5f       	subi	r18, 0xFA	; 250
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
	for(int i = 0; i < 6; i++){
		while(!(UCSR0A & (1<<UDRE0)));      //wait for register to be free
 130:	e0 ec       	ldi	r30, 0xC0	; 192
 132:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = data[i];
 134:	c6 ec       	ldi	r28, 0xC6	; 198
 136:	d0 e0       	ldi	r29, 0x00	; 0
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
}

void uart_Transmit(char data[]){
	for(int i = 0; i < 6; i++){
		while(!(UCSR0A & (1<<UDRE0)));      //wait for register to be free
 138:	90 81       	ld	r25, Z
 13a:	95 ff       	sbrs	r25, 5
 13c:	fd cf       	rjmp	.-6      	; 0x138 <_Z13uart_TransmitPc+0x14>
		UDR0 = data[i];
 13e:	8d 91       	ld	r24, X+
 140:	88 83       	st	Y, r24
	
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
}

void uart_Transmit(char data[]){
	for(int i = 0; i < 6; i++){
 142:	a2 17       	cp	r26, r18
 144:	b3 07       	cpc	r27, r19
 146:	c1 f7       	brne	.-16     	; 0x138 <_Z13uart_TransmitPc+0x14>
		while(!(UCSR0A & (1<<UDRE0)));      //wait for register to be free
		UDR0 = data[i];
	}
	
	while(!(UCSR0A & (1<<UDRE0))); 
 148:	e0 ec       	ldi	r30, 0xC0	; 192
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	85 ff       	sbrs	r24, 5
 150:	fd cf       	rjmp	.-6      	; 0x14c <_Z13uart_TransmitPc+0x28>
	UDR0 = ' ';
 152:	80 e2       	ldi	r24, 0x20	; 32
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <_Z9uart_Initv>:

void uart_Init(){
	UBRR0H = (BAUDRATE>>8);				 //shift register to the right by 8 bits
 15e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = BAUDRATE;					 //set baud rate
 162:	87 e6       	ldi	r24, 0x67	; 103
 164:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);   //enable receiver and transmitter
 168:	e1 ec       	ldi	r30, 0xC1	; 193
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	88 61       	ori	r24, 0x18	; 24
 170:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01); //8 bit data format
 172:	e2 ec       	ldi	r30, 0xC2	; 194
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	86 60       	ori	r24, 0x06	; 6
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <_Z7getChari>:
	word[6] = '\0';
}

char getChar(int digit){
	
	switch(digit)
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	89 30       	cpi	r24, 0x09	; 9
 182:	91 05       	cpc	r25, r1
 184:	a8 f4       	brcc	.+42     	; 0x1b0 <_Z7getChari+0x32>
 186:	86 5a       	subi	r24, 0xA6	; 166
 188:	9f 4f       	sbci	r25, 0xFF	; 255
 18a:	fc 01       	movw	r30, r24
 18c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__tablejump2__>
	{
		case 1: return '1';
		case 2: return '2';
 190:	82 e3       	ldi	r24, 0x32	; 50
 192:	08 95       	ret
		case 3: return '3';
 194:	83 e3       	ldi	r24, 0x33	; 51
 196:	08 95       	ret
		case 4: return '4';
 198:	84 e3       	ldi	r24, 0x34	; 52
 19a:	08 95       	ret
		case 5: return '5';
 19c:	85 e3       	ldi	r24, 0x35	; 53
 19e:	08 95       	ret
		case 6: return '6';
 1a0:	86 e3       	ldi	r24, 0x36	; 54
 1a2:	08 95       	ret
		case 7: return '7';
 1a4:	87 e3       	ldi	r24, 0x37	; 55
 1a6:	08 95       	ret
		case 8: return '8';
 1a8:	88 e3       	ldi	r24, 0x38	; 56
 1aa:	08 95       	ret
		case 9: return '9';
 1ac:	89 e3       	ldi	r24, 0x39	; 57
 1ae:	08 95       	ret
		default: return '0';
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	08 95       	ret

char getChar(int digit){
	
	switch(digit)
	{
		case 1: return '1';
 1b4:	81 e3       	ldi	r24, 0x31	; 49
		case 7: return '7';
		case 8: return '8';
		case 9: return '9';
		default: return '0';
	}
}
 1b6:	08 95       	ret

000001b8 <_Z15convertToStringjPc>:
	UCSR0B |= (1<<TXEN0) | (1<<RXEN0);   //enable receiver and transmitter
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01); //8 bit data format
}

void convertToString(uint16_t value, char word[])
{
 1b8:	4f 92       	push	r4
 1ba:	5f 92       	push	r5
 1bc:	6f 92       	push	r6
 1be:	7f 92       	push	r7
 1c0:	8f 92       	push	r8
 1c2:	9f 92       	push	r9
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	4b 01       	movw	r8, r22
	double number = value;
 1da:	bc 01       	movw	r22, r24
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 8d 02 	call	0x51a	; 0x51a <__floatunsisf>
 1e4:	6b 01       	movw	r12, r22
 1e6:	7c 01       	movw	r14, r24
	int divisionCount = 0;
	int digit;
	
	while(number >= 1){
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e8       	ldi	r20, 0x80	; 128
 1ee:	5f e3       	ldi	r21, 0x3F	; 63
 1f0:	0e 94 1b 03 	call	0x636	; 0x636 <__gesf2>
 1f4:	88 23       	and	r24, r24
 1f6:	f4 f1       	brlt	.+124    	; 0x274 <_Z15convertToStringjPc+0xbc>
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
		 number = number / 10;
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e2       	ldi	r20, 0x20	; 32
 202:	51 e4       	ldi	r21, 0x41	; 65
 204:	c7 01       	movw	r24, r14
 206:	b6 01       	movw	r22, r12
 208:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__divsf3>
 20c:	6b 01       	movw	r12, r22
 20e:	7c 01       	movw	r14, r24
		 divisionCount++;
 210:	21 96       	adiw	r28, 0x01	; 1
{
	double number = value;
	int divisionCount = 0;
	int digit;
	
	while(number >= 1){
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	40 e8       	ldi	r20, 0x80	; 128
 218:	5f e3       	ldi	r21, 0x3F	; 63
 21a:	0e 94 1b 03 	call	0x636	; 0x636 <__gesf2>
 21e:	88 23       	and	r24, r24
 220:	6c f7       	brge	.-38     	; 0x1fc <_Z15convertToStringjPc+0x44>
 222:	2b c0       	rjmp	.+86     	; 0x27a <_Z15convertToStringjPc+0xc2>
		 number = number / 10;
		 divisionCount++;
	}
	for(int i = 0; i < divisionCount && i < 6; i++){
 224:	a0 16       	cp	r10, r16
 226:	b1 06       	cpc	r11, r17
 228:	29 f1       	breq	.+74     	; 0x274 <_Z15convertToStringjPc+0xbc>
		
		
		number = number * 10;
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	40 e2       	ldi	r20, 0x20	; 32
 230:	51 e4       	ldi	r21, 0x41	; 65
 232:	c7 01       	movw	r24, r14
 234:	b6 01       	movw	r22, r12
 236:	0e 94 20 03 	call	0x640	; 0x640 <__mulsf3>
 23a:	6b 01       	movw	r12, r22
 23c:	7c 01       	movw	r14, r24
		digit = (int)number;
 23e:	0e 94 57 02 	call	0x4ae	; 0x4ae <__fixsfsi>
 242:	2b 01       	movw	r4, r22
 244:	3c 01       	movw	r6, r24
		number = number - digit;
 246:	07 2e       	mov	r0, r23
 248:	00 0c       	add	r0, r0
 24a:	88 0b       	sbc	r24, r24
 24c:	99 0b       	sbc	r25, r25
 24e:	0e 94 8f 02 	call	0x51e	; 0x51e <__floatsisf>
 252:	9b 01       	movw	r18, r22
 254:	ac 01       	movw	r20, r24
 256:	c7 01       	movw	r24, r14
 258:	b6 01       	movw	r22, r12
 25a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <__subsf3>
 25e:	6b 01       	movw	r12, r22
 260:	7c 01       	movw	r14, r24
		word[i] = getChar(digit);
 262:	c2 01       	movw	r24, r4
 264:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z7getChari>
 268:	f8 01       	movw	r30, r16
 26a:	81 93       	st	Z+, r24
 26c:	8f 01       	movw	r16, r30
	
	while(number >= 1){
		 number = number / 10;
		 divisionCount++;
	}
	for(int i = 0; i < divisionCount && i < 6; i++){
 26e:	ce 17       	cp	r28, r30
 270:	df 07       	cpc	r29, r31
 272:	c1 f6       	brne	.-80     	; 0x224 <_Z15convertToStringjPc+0x6c>
		digit = (int)number;
		number = number - digit;
		word[i] = getChar(digit);
	}
	
	word[6] = '\0';
 274:	f4 01       	movw	r30, r8
 276:	16 82       	std	Z+6, r1	; 0x06
}
 278:	0b c0       	rjmp	.+22     	; 0x290 <_Z15convertToStringjPc+0xd8>
	
	while(number >= 1){
		 number = number / 10;
		 divisionCount++;
	}
	for(int i = 0; i < divisionCount && i < 6; i++){
 27a:	1c 16       	cp	r1, r28
 27c:	1d 06       	cpc	r1, r29
 27e:	d4 f7       	brge	.-12     	; 0x274 <_Z15convertToStringjPc+0xbc>
 280:	84 01       	movw	r16, r8
 282:	c8 0d       	add	r28, r8
 284:	d9 1d       	adc	r29, r9
 286:	54 01       	movw	r10, r8
 288:	f6 e0       	ldi	r31, 0x06	; 6
 28a:	af 0e       	add	r10, r31
 28c:	b1 1c       	adc	r11, r1
 28e:	cd cf       	rjmp	.-102    	; 0x22a <_Z15convertToStringjPc+0x72>
		number = number - digit;
		word[i] = getChar(digit);
	}
	
	word[6] = '\0';
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	cf 90       	pop	r12
 2a0:	bf 90       	pop	r11
 2a2:	af 90       	pop	r10
 2a4:	9f 90       	pop	r9
 2a6:	8f 90       	pop	r8
 2a8:	7f 90       	pop	r7
 2aa:	6f 90       	pop	r6
 2ac:	5f 90       	pop	r5
 2ae:	4f 90       	pop	r4
 2b0:	08 95       	ret

000002b2 <main>:

int main(void)
{
	//Init
	
	DDRB |= (1 << DDRB5);  //Set portB 5 as output LED
 2b2:	25 9a       	sbi	0x04, 5	; 4
	DDRB &= ~(1<<DDRB7);   //Set portB 7 as input
 2b4:	27 98       	cbi	0x04, 7	; 4
	DDRC &= ~(1<<DDRC0);
 2b6:	38 98       	cbi	0x07, 0	; 7
	
	uart_Init();
 2b8:	0e 94 af 00 	call	0x15e	; 0x15e <_Z9uart_Initv>
	adc_Init();
 2bc:	0e 94 8b 00 	call	0x116	; 0x116 <_Z8adc_Initv>
	
	sei();
 2c0:	78 94       	sei
	
	/* Replace with your application code */
	while (1) {
		if(!(PINB & (1<<PINB7))) // PINB7 is low (Button has been pressed)
 2c2:	1f 99       	sbic	0x03, 7	; 3
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <main+0x10>
		{
			while(!(PINB & (1<<PINB7)));
 2c6:	1f 9b       	sbis	0x03, 7	; 3
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <main+0x14>
			PINB |= (1<<PINB5);
 2ca:	1d 9a       	sbi	0x03, 5	; 3
			
			channel = 0;
 2cc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <channel>
			
			voltage = adc_read(channel);
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 77 00 	call	0xee	; 0xee <_Z8adc_readh>
 2d6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <voltage+0x1>
 2da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <voltage>
			
			convertToString(voltage, value);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	71 e0       	ldi	r23, 0x01	; 1
 2e2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z15convertToStringjPc>
			
			uart_Transmit(value);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 92 00 	call	0x124	; 0x124 <_Z13uart_TransmitPc>
 2ee:	e9 cf       	rjmp	.-46     	; 0x2c2 <main+0x10>

000002f0 <__subsf3>:
 2f0:	50 58       	subi	r21, 0x80	; 128

000002f2 <__addsf3>:
 2f2:	bb 27       	eor	r27, r27
 2f4:	aa 27       	eor	r26, r26
 2f6:	0e 94 90 01 	call	0x320	; 0x320 <__addsf3x>
 2fa:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_round>
 2fe:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_pscA>
 302:	38 f0       	brcs	.+14     	; 0x312 <__addsf3+0x20>
 304:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_pscB>
 308:	20 f0       	brcs	.+8      	; 0x312 <__addsf3+0x20>
 30a:	39 f4       	brne	.+14     	; 0x31a <__addsf3+0x28>
 30c:	9f 3f       	cpi	r25, 0xFF	; 255
 30e:	19 f4       	brne	.+6      	; 0x316 <__addsf3+0x24>
 310:	26 f4       	brtc	.+8      	; 0x31a <__addsf3+0x28>
 312:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_nan>
 316:	0e f4       	brtc	.+2      	; 0x31a <__addsf3+0x28>
 318:	e0 95       	com	r30
 31a:	e7 fb       	bst	r30, 7
 31c:	0c 94 ca 02 	jmp	0x594	; 0x594 <__fp_inf>

00000320 <__addsf3x>:
 320:	e9 2f       	mov	r30, r25
 322:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fp_split3>
 326:	58 f3       	brcs	.-42     	; 0x2fe <__addsf3+0xc>
 328:	ba 17       	cp	r27, r26
 32a:	62 07       	cpc	r22, r18
 32c:	73 07       	cpc	r23, r19
 32e:	84 07       	cpc	r24, r20
 330:	95 07       	cpc	r25, r21
 332:	20 f0       	brcs	.+8      	; 0x33c <__addsf3x+0x1c>
 334:	79 f4       	brne	.+30     	; 0x354 <__addsf3x+0x34>
 336:	a6 f5       	brtc	.+104    	; 0x3a0 <__addsf3x+0x80>
 338:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_zero>
 33c:	0e f4       	brtc	.+2      	; 0x340 <__addsf3x+0x20>
 33e:	e0 95       	com	r30
 340:	0b 2e       	mov	r0, r27
 342:	ba 2f       	mov	r27, r26
 344:	a0 2d       	mov	r26, r0
 346:	0b 01       	movw	r0, r22
 348:	b9 01       	movw	r22, r18
 34a:	90 01       	movw	r18, r0
 34c:	0c 01       	movw	r0, r24
 34e:	ca 01       	movw	r24, r20
 350:	a0 01       	movw	r20, r0
 352:	11 24       	eor	r1, r1
 354:	ff 27       	eor	r31, r31
 356:	59 1b       	sub	r21, r25
 358:	99 f0       	breq	.+38     	; 0x380 <__addsf3x+0x60>
 35a:	59 3f       	cpi	r21, 0xF9	; 249
 35c:	50 f4       	brcc	.+20     	; 0x372 <__addsf3x+0x52>
 35e:	50 3e       	cpi	r21, 0xE0	; 224
 360:	68 f1       	brcs	.+90     	; 0x3bc <__addsf3x+0x9c>
 362:	1a 16       	cp	r1, r26
 364:	f0 40       	sbci	r31, 0x00	; 0
 366:	a2 2f       	mov	r26, r18
 368:	23 2f       	mov	r18, r19
 36a:	34 2f       	mov	r19, r20
 36c:	44 27       	eor	r20, r20
 36e:	58 5f       	subi	r21, 0xF8	; 248
 370:	f3 cf       	rjmp	.-26     	; 0x358 <__addsf3x+0x38>
 372:	46 95       	lsr	r20
 374:	37 95       	ror	r19
 376:	27 95       	ror	r18
 378:	a7 95       	ror	r26
 37a:	f0 40       	sbci	r31, 0x00	; 0
 37c:	53 95       	inc	r21
 37e:	c9 f7       	brne	.-14     	; 0x372 <__addsf3x+0x52>
 380:	7e f4       	brtc	.+30     	; 0x3a0 <__addsf3x+0x80>
 382:	1f 16       	cp	r1, r31
 384:	ba 0b       	sbc	r27, r26
 386:	62 0b       	sbc	r22, r18
 388:	73 0b       	sbc	r23, r19
 38a:	84 0b       	sbc	r24, r20
 38c:	ba f0       	brmi	.+46     	; 0x3bc <__addsf3x+0x9c>
 38e:	91 50       	subi	r25, 0x01	; 1
 390:	a1 f0       	breq	.+40     	; 0x3ba <__addsf3x+0x9a>
 392:	ff 0f       	add	r31, r31
 394:	bb 1f       	adc	r27, r27
 396:	66 1f       	adc	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	88 1f       	adc	r24, r24
 39c:	c2 f7       	brpl	.-16     	; 0x38e <__addsf3x+0x6e>
 39e:	0e c0       	rjmp	.+28     	; 0x3bc <__addsf3x+0x9c>
 3a0:	ba 0f       	add	r27, r26
 3a2:	62 1f       	adc	r22, r18
 3a4:	73 1f       	adc	r23, r19
 3a6:	84 1f       	adc	r24, r20
 3a8:	48 f4       	brcc	.+18     	; 0x3bc <__addsf3x+0x9c>
 3aa:	87 95       	ror	r24
 3ac:	77 95       	ror	r23
 3ae:	67 95       	ror	r22
 3b0:	b7 95       	ror	r27
 3b2:	f7 95       	ror	r31
 3b4:	9e 3f       	cpi	r25, 0xFE	; 254
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <__addsf3x+0x9a>
 3b8:	b0 cf       	rjmp	.-160    	; 0x31a <__addsf3+0x28>
 3ba:	93 95       	inc	r25
 3bc:	88 0f       	add	r24, r24
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <__addsf3x+0xa2>
 3c0:	99 27       	eor	r25, r25
 3c2:	ee 0f       	add	r30, r30
 3c4:	97 95       	ror	r25
 3c6:	87 95       	ror	r24
 3c8:	08 95       	ret

000003ca <__divsf3>:
 3ca:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__divsf3x>
 3ce:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_round>
 3d2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_pscB>
 3d6:	58 f0       	brcs	.+22     	; 0x3ee <__divsf3+0x24>
 3d8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_pscA>
 3dc:	40 f0       	brcs	.+16     	; 0x3ee <__divsf3+0x24>
 3de:	29 f4       	brne	.+10     	; 0x3ea <__divsf3+0x20>
 3e0:	5f 3f       	cpi	r21, 0xFF	; 255
 3e2:	29 f0       	breq	.+10     	; 0x3ee <__divsf3+0x24>
 3e4:	0c 94 ca 02 	jmp	0x594	; 0x594 <__fp_inf>
 3e8:	51 11       	cpse	r21, r1
 3ea:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_szero>
 3ee:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_nan>

000003f2 <__divsf3x>:
 3f2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fp_split3>
 3f6:	68 f3       	brcs	.-38     	; 0x3d2 <__divsf3+0x8>

000003f8 <__divsf3_pse>:
 3f8:	99 23       	and	r25, r25
 3fa:	b1 f3       	breq	.-20     	; 0x3e8 <__divsf3+0x1e>
 3fc:	55 23       	and	r21, r21
 3fe:	91 f3       	breq	.-28     	; 0x3e4 <__divsf3+0x1a>
 400:	95 1b       	sub	r25, r21
 402:	55 0b       	sbc	r21, r21
 404:	bb 27       	eor	r27, r27
 406:	aa 27       	eor	r26, r26
 408:	62 17       	cp	r22, r18
 40a:	73 07       	cpc	r23, r19
 40c:	84 07       	cpc	r24, r20
 40e:	38 f0       	brcs	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 410:	9f 5f       	subi	r25, 0xFF	; 255
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	44 1f       	adc	r20, r20
 41a:	aa 1f       	adc	r26, r26
 41c:	a9 f3       	breq	.-22     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 41e:	35 d0       	rcall	.+106    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 420:	0e 2e       	mov	r0, r30
 422:	3a f0       	brmi	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 424:	e0 e8       	ldi	r30, 0x80	; 128
 426:	32 d0       	rcall	.+100    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 428:	91 50       	subi	r25, 0x01	; 1
 42a:	50 40       	sbci	r21, 0x00	; 0
 42c:	e6 95       	lsr	r30
 42e:	00 1c       	adc	r0, r0
 430:	ca f7       	brpl	.-14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 432:	2b d0       	rcall	.+86     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 434:	fe 2f       	mov	r31, r30
 436:	29 d0       	rcall	.+82     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 438:	66 0f       	add	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	88 1f       	adc	r24, r24
 43e:	bb 1f       	adc	r27, r27
 440:	26 17       	cp	r18, r22
 442:	37 07       	cpc	r19, r23
 444:	48 07       	cpc	r20, r24
 446:	ab 07       	cpc	r26, r27
 448:	b0 e8       	ldi	r27, 0x80	; 128
 44a:	09 f0       	breq	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	bb 0b       	sbc	r27, r27
 44e:	80 2d       	mov	r24, r0
 450:	bf 01       	movw	r22, r30
 452:	ff 27       	eor	r31, r31
 454:	93 58       	subi	r25, 0x83	; 131
 456:	5f 4f       	sbci	r21, 0xFF	; 255
 458:	3a f0       	brmi	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 45a:	9e 3f       	cpi	r25, 0xFE	; 254
 45c:	51 05       	cpc	r21, r1
 45e:	78 f0       	brcs	.+30     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 460:	0c 94 ca 02 	jmp	0x594	; 0x594 <__fp_inf>
 464:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_szero>
 468:	5f 3f       	cpi	r21, 0xFF	; 255
 46a:	e4 f3       	brlt	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46c:	98 3e       	cpi	r25, 0xE8	; 232
 46e:	d4 f3       	brlt	.-12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 470:	86 95       	lsr	r24
 472:	77 95       	ror	r23
 474:	67 95       	ror	r22
 476:	b7 95       	ror	r27
 478:	f7 95       	ror	r31
 47a:	9f 5f       	subi	r25, 0xFF	; 255
 47c:	c9 f7       	brne	.-14     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 47e:	88 0f       	add	r24, r24
 480:	91 1d       	adc	r25, r1
 482:	96 95       	lsr	r25
 484:	87 95       	ror	r24
 486:	97 f9       	bld	r25, 7
 488:	08 95       	ret
 48a:	e1 e0       	ldi	r30, 0x01	; 1
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	bb 1f       	adc	r27, r27
 494:	62 17       	cp	r22, r18
 496:	73 07       	cpc	r23, r19
 498:	84 07       	cpc	r24, r20
 49a:	ba 07       	cpc	r27, r26
 49c:	20 f0       	brcs	.+8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49e:	62 1b       	sub	r22, r18
 4a0:	73 0b       	sbc	r23, r19
 4a2:	84 0b       	sbc	r24, r20
 4a4:	ba 0b       	sbc	r27, r26
 4a6:	ee 1f       	adc	r30, r30
 4a8:	88 f7       	brcc	.-30     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 4aa:	e0 95       	com	r30
 4ac:	08 95       	ret

000004ae <__fixsfsi>:
 4ae:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__fixunssfsi>
 4b2:	68 94       	set
 4b4:	b1 11       	cpse	r27, r1
 4b6:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_szero>
 4ba:	08 95       	ret

000004bc <__fixunssfsi>:
 4bc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__fp_splitA>
 4c0:	88 f0       	brcs	.+34     	; 0x4e4 <__fixunssfsi+0x28>
 4c2:	9f 57       	subi	r25, 0x7F	; 127
 4c4:	98 f0       	brcs	.+38     	; 0x4ec <__fixunssfsi+0x30>
 4c6:	b9 2f       	mov	r27, r25
 4c8:	99 27       	eor	r25, r25
 4ca:	b7 51       	subi	r27, 0x17	; 23
 4cc:	b0 f0       	brcs	.+44     	; 0x4fa <__fixunssfsi+0x3e>
 4ce:	e1 f0       	breq	.+56     	; 0x508 <__fixunssfsi+0x4c>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	1a f0       	brmi	.+6      	; 0x4e0 <__fixunssfsi+0x24>
 4da:	ba 95       	dec	r27
 4dc:	c9 f7       	brne	.-14     	; 0x4d0 <__fixunssfsi+0x14>
 4de:	14 c0       	rjmp	.+40     	; 0x508 <__fixunssfsi+0x4c>
 4e0:	b1 30       	cpi	r27, 0x01	; 1
 4e2:	91 f0       	breq	.+36     	; 0x508 <__fixunssfsi+0x4c>
 4e4:	0e 94 14 03 	call	0x628	; 0x628 <__fp_zero>
 4e8:	b1 e0       	ldi	r27, 0x01	; 1
 4ea:	08 95       	ret
 4ec:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_zero>
 4f0:	67 2f       	mov	r22, r23
 4f2:	78 2f       	mov	r23, r24
 4f4:	88 27       	eor	r24, r24
 4f6:	b8 5f       	subi	r27, 0xF8	; 248
 4f8:	39 f0       	breq	.+14     	; 0x508 <__fixunssfsi+0x4c>
 4fa:	b9 3f       	cpi	r27, 0xF9	; 249
 4fc:	cc f3       	brlt	.-14     	; 0x4f0 <__fixunssfsi+0x34>
 4fe:	86 95       	lsr	r24
 500:	77 95       	ror	r23
 502:	67 95       	ror	r22
 504:	b3 95       	inc	r27
 506:	d9 f7       	brne	.-10     	; 0x4fe <__fixunssfsi+0x42>
 508:	3e f4       	brtc	.+14     	; 0x518 <__fixunssfsi+0x5c>
 50a:	90 95       	com	r25
 50c:	80 95       	com	r24
 50e:	70 95       	com	r23
 510:	61 95       	neg	r22
 512:	7f 4f       	sbci	r23, 0xFF	; 255
 514:	8f 4f       	sbci	r24, 0xFF	; 255
 516:	9f 4f       	sbci	r25, 0xFF	; 255
 518:	08 95       	ret

0000051a <__floatunsisf>:
 51a:	e8 94       	clt
 51c:	09 c0       	rjmp	.+18     	; 0x530 <__floatsisf+0x12>

0000051e <__floatsisf>:
 51e:	97 fb       	bst	r25, 7
 520:	3e f4       	brtc	.+14     	; 0x530 <__floatsisf+0x12>
 522:	90 95       	com	r25
 524:	80 95       	com	r24
 526:	70 95       	com	r23
 528:	61 95       	neg	r22
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	8f 4f       	sbci	r24, 0xFF	; 255
 52e:	9f 4f       	sbci	r25, 0xFF	; 255
 530:	99 23       	and	r25, r25
 532:	a9 f0       	breq	.+42     	; 0x55e <__floatsisf+0x40>
 534:	f9 2f       	mov	r31, r25
 536:	96 e9       	ldi	r25, 0x96	; 150
 538:	bb 27       	eor	r27, r27
 53a:	93 95       	inc	r25
 53c:	f6 95       	lsr	r31
 53e:	87 95       	ror	r24
 540:	77 95       	ror	r23
 542:	67 95       	ror	r22
 544:	b7 95       	ror	r27
 546:	f1 11       	cpse	r31, r1
 548:	f8 cf       	rjmp	.-16     	; 0x53a <__floatsisf+0x1c>
 54a:	fa f4       	brpl	.+62     	; 0x58a <__floatsisf+0x6c>
 54c:	bb 0f       	add	r27, r27
 54e:	11 f4       	brne	.+4      	; 0x554 <__floatsisf+0x36>
 550:	60 ff       	sbrs	r22, 0
 552:	1b c0       	rjmp	.+54     	; 0x58a <__floatsisf+0x6c>
 554:	6f 5f       	subi	r22, 0xFF	; 255
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	8f 4f       	sbci	r24, 0xFF	; 255
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	16 c0       	rjmp	.+44     	; 0x58a <__floatsisf+0x6c>
 55e:	88 23       	and	r24, r24
 560:	11 f0       	breq	.+4      	; 0x566 <__floatsisf+0x48>
 562:	96 e9       	ldi	r25, 0x96	; 150
 564:	11 c0       	rjmp	.+34     	; 0x588 <__floatsisf+0x6a>
 566:	77 23       	and	r23, r23
 568:	21 f0       	breq	.+8      	; 0x572 <__floatsisf+0x54>
 56a:	9e e8       	ldi	r25, 0x8E	; 142
 56c:	87 2f       	mov	r24, r23
 56e:	76 2f       	mov	r23, r22
 570:	05 c0       	rjmp	.+10     	; 0x57c <__floatsisf+0x5e>
 572:	66 23       	and	r22, r22
 574:	71 f0       	breq	.+28     	; 0x592 <__floatsisf+0x74>
 576:	96 e8       	ldi	r25, 0x86	; 134
 578:	86 2f       	mov	r24, r22
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	2a f0       	brmi	.+10     	; 0x58a <__floatsisf+0x6c>
 580:	9a 95       	dec	r25
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	88 1f       	adc	r24, r24
 588:	da f7       	brpl	.-10     	; 0x580 <__floatsisf+0x62>
 58a:	88 0f       	add	r24, r24
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	97 f9       	bld	r25, 7
 592:	08 95       	ret

00000594 <__fp_inf>:
 594:	97 f9       	bld	r25, 7
 596:	9f 67       	ori	r25, 0x7F	; 127
 598:	80 e8       	ldi	r24, 0x80	; 128
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	08 95       	ret

000005a0 <__fp_nan>:
 5a0:	9f ef       	ldi	r25, 0xFF	; 255
 5a2:	80 ec       	ldi	r24, 0xC0	; 192
 5a4:	08 95       	ret

000005a6 <__fp_pscA>:
 5a6:	00 24       	eor	r0, r0
 5a8:	0a 94       	dec	r0
 5aa:	16 16       	cp	r1, r22
 5ac:	17 06       	cpc	r1, r23
 5ae:	18 06       	cpc	r1, r24
 5b0:	09 06       	cpc	r0, r25
 5b2:	08 95       	ret

000005b4 <__fp_pscB>:
 5b4:	00 24       	eor	r0, r0
 5b6:	0a 94       	dec	r0
 5b8:	12 16       	cp	r1, r18
 5ba:	13 06       	cpc	r1, r19
 5bc:	14 06       	cpc	r1, r20
 5be:	05 06       	cpc	r0, r21
 5c0:	08 95       	ret

000005c2 <__fp_round>:
 5c2:	09 2e       	mov	r0, r25
 5c4:	03 94       	inc	r0
 5c6:	00 0c       	add	r0, r0
 5c8:	11 f4       	brne	.+4      	; 0x5ce <__fp_round+0xc>
 5ca:	88 23       	and	r24, r24
 5cc:	52 f0       	brmi	.+20     	; 0x5e2 <__fp_round+0x20>
 5ce:	bb 0f       	add	r27, r27
 5d0:	40 f4       	brcc	.+16     	; 0x5e2 <__fp_round+0x20>
 5d2:	bf 2b       	or	r27, r31
 5d4:	11 f4       	brne	.+4      	; 0x5da <__fp_round+0x18>
 5d6:	60 ff       	sbrs	r22, 0
 5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <__fp_round+0x20>
 5da:	6f 5f       	subi	r22, 0xFF	; 255
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	08 95       	ret

000005e4 <__fp_split3>:
 5e4:	57 fd       	sbrc	r21, 7
 5e6:	90 58       	subi	r25, 0x80	; 128
 5e8:	44 0f       	add	r20, r20
 5ea:	55 1f       	adc	r21, r21
 5ec:	59 f0       	breq	.+22     	; 0x604 <__fp_splitA+0x10>
 5ee:	5f 3f       	cpi	r21, 0xFF	; 255
 5f0:	71 f0       	breq	.+28     	; 0x60e <__fp_splitA+0x1a>
 5f2:	47 95       	ror	r20

000005f4 <__fp_splitA>:
 5f4:	88 0f       	add	r24, r24
 5f6:	97 fb       	bst	r25, 7
 5f8:	99 1f       	adc	r25, r25
 5fa:	61 f0       	breq	.+24     	; 0x614 <__fp_splitA+0x20>
 5fc:	9f 3f       	cpi	r25, 0xFF	; 255
 5fe:	79 f0       	breq	.+30     	; 0x61e <__fp_splitA+0x2a>
 600:	87 95       	ror	r24
 602:	08 95       	ret
 604:	12 16       	cp	r1, r18
 606:	13 06       	cpc	r1, r19
 608:	14 06       	cpc	r1, r20
 60a:	55 1f       	adc	r21, r21
 60c:	f2 cf       	rjmp	.-28     	; 0x5f2 <__fp_split3+0xe>
 60e:	46 95       	lsr	r20
 610:	f1 df       	rcall	.-30     	; 0x5f4 <__fp_splitA>
 612:	08 c0       	rjmp	.+16     	; 0x624 <__fp_splitA+0x30>
 614:	16 16       	cp	r1, r22
 616:	17 06       	cpc	r1, r23
 618:	18 06       	cpc	r1, r24
 61a:	99 1f       	adc	r25, r25
 61c:	f1 cf       	rjmp	.-30     	; 0x600 <__fp_splitA+0xc>
 61e:	86 95       	lsr	r24
 620:	71 05       	cpc	r23, r1
 622:	61 05       	cpc	r22, r1
 624:	08 94       	sec
 626:	08 95       	ret

00000628 <__fp_zero>:
 628:	e8 94       	clt

0000062a <__fp_szero>:
 62a:	bb 27       	eor	r27, r27
 62c:	66 27       	eor	r22, r22
 62e:	77 27       	eor	r23, r23
 630:	cb 01       	movw	r24, r22
 632:	97 f9       	bld	r25, 7
 634:	08 95       	ret

00000636 <__gesf2>:
 636:	0e 94 8d 03 	call	0x71a	; 0x71a <__fp_cmp>
 63a:	08 f4       	brcc	.+2      	; 0x63e <__gesf2+0x8>
 63c:	8f ef       	ldi	r24, 0xFF	; 255
 63e:	08 95       	ret

00000640 <__mulsf3>:
 640:	0e 94 33 03 	call	0x666	; 0x666 <__mulsf3x>
 644:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_round>
 648:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_pscA>
 64c:	38 f0       	brcs	.+14     	; 0x65c <__mulsf3+0x1c>
 64e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__fp_pscB>
 652:	20 f0       	brcs	.+8      	; 0x65c <__mulsf3+0x1c>
 654:	95 23       	and	r25, r21
 656:	11 f0       	breq	.+4      	; 0x65c <__mulsf3+0x1c>
 658:	0c 94 ca 02 	jmp	0x594	; 0x594 <__fp_inf>
 65c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_nan>
 660:	11 24       	eor	r1, r1
 662:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_szero>

00000666 <__mulsf3x>:
 666:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fp_split3>
 66a:	70 f3       	brcs	.-36     	; 0x648 <__mulsf3+0x8>

0000066c <__mulsf3_pse>:
 66c:	95 9f       	mul	r25, r21
 66e:	c1 f3       	breq	.-16     	; 0x660 <__mulsf3+0x20>
 670:	95 0f       	add	r25, r21
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	55 1f       	adc	r21, r21
 676:	62 9f       	mul	r22, r18
 678:	f0 01       	movw	r30, r0
 67a:	72 9f       	mul	r23, r18
 67c:	bb 27       	eor	r27, r27
 67e:	f0 0d       	add	r31, r0
 680:	b1 1d       	adc	r27, r1
 682:	63 9f       	mul	r22, r19
 684:	aa 27       	eor	r26, r26
 686:	f0 0d       	add	r31, r0
 688:	b1 1d       	adc	r27, r1
 68a:	aa 1f       	adc	r26, r26
 68c:	64 9f       	mul	r22, r20
 68e:	66 27       	eor	r22, r22
 690:	b0 0d       	add	r27, r0
 692:	a1 1d       	adc	r26, r1
 694:	66 1f       	adc	r22, r22
 696:	82 9f       	mul	r24, r18
 698:	22 27       	eor	r18, r18
 69a:	b0 0d       	add	r27, r0
 69c:	a1 1d       	adc	r26, r1
 69e:	62 1f       	adc	r22, r18
 6a0:	73 9f       	mul	r23, r19
 6a2:	b0 0d       	add	r27, r0
 6a4:	a1 1d       	adc	r26, r1
 6a6:	62 1f       	adc	r22, r18
 6a8:	83 9f       	mul	r24, r19
 6aa:	a0 0d       	add	r26, r0
 6ac:	61 1d       	adc	r22, r1
 6ae:	22 1f       	adc	r18, r18
 6b0:	74 9f       	mul	r23, r20
 6b2:	33 27       	eor	r19, r19
 6b4:	a0 0d       	add	r26, r0
 6b6:	61 1d       	adc	r22, r1
 6b8:	23 1f       	adc	r18, r19
 6ba:	84 9f       	mul	r24, r20
 6bc:	60 0d       	add	r22, r0
 6be:	21 1d       	adc	r18, r1
 6c0:	82 2f       	mov	r24, r18
 6c2:	76 2f       	mov	r23, r22
 6c4:	6a 2f       	mov	r22, r26
 6c6:	11 24       	eor	r1, r1
 6c8:	9f 57       	subi	r25, 0x7F	; 127
 6ca:	50 40       	sbci	r21, 0x00	; 0
 6cc:	9a f0       	brmi	.+38     	; 0x6f4 <__mulsf3_pse+0x88>
 6ce:	f1 f0       	breq	.+60     	; 0x70c <__mulsf3_pse+0xa0>
 6d0:	88 23       	and	r24, r24
 6d2:	4a f0       	brmi	.+18     	; 0x6e6 <__mulsf3_pse+0x7a>
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	bb 1f       	adc	r27, r27
 6da:	66 1f       	adc	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	91 50       	subi	r25, 0x01	; 1
 6e2:	50 40       	sbci	r21, 0x00	; 0
 6e4:	a9 f7       	brne	.-22     	; 0x6d0 <__mulsf3_pse+0x64>
 6e6:	9e 3f       	cpi	r25, 0xFE	; 254
 6e8:	51 05       	cpc	r21, r1
 6ea:	80 f0       	brcs	.+32     	; 0x70c <__mulsf3_pse+0xa0>
 6ec:	0c 94 ca 02 	jmp	0x594	; 0x594 <__fp_inf>
 6f0:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_szero>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	e4 f3       	brlt	.-8      	; 0x6f0 <__mulsf3_pse+0x84>
 6f8:	98 3e       	cpi	r25, 0xE8	; 232
 6fa:	d4 f3       	brlt	.-12     	; 0x6f0 <__mulsf3_pse+0x84>
 6fc:	86 95       	lsr	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b7 95       	ror	r27
 704:	f7 95       	ror	r31
 706:	e7 95       	ror	r30
 708:	9f 5f       	subi	r25, 0xFF	; 255
 70a:	c1 f7       	brne	.-16     	; 0x6fc <__mulsf3_pse+0x90>
 70c:	fe 2b       	or	r31, r30
 70e:	88 0f       	add	r24, r24
 710:	91 1d       	adc	r25, r1
 712:	96 95       	lsr	r25
 714:	87 95       	ror	r24
 716:	97 f9       	bld	r25, 7
 718:	08 95       	ret

0000071a <__fp_cmp>:
 71a:	99 0f       	add	r25, r25
 71c:	00 08       	sbc	r0, r0
 71e:	55 0f       	add	r21, r21
 720:	aa 0b       	sbc	r26, r26
 722:	e0 e8       	ldi	r30, 0x80	; 128
 724:	fe ef       	ldi	r31, 0xFE	; 254
 726:	16 16       	cp	r1, r22
 728:	17 06       	cpc	r1, r23
 72a:	e8 07       	cpc	r30, r24
 72c:	f9 07       	cpc	r31, r25
 72e:	c0 f0       	brcs	.+48     	; 0x760 <__fp_cmp+0x46>
 730:	12 16       	cp	r1, r18
 732:	13 06       	cpc	r1, r19
 734:	e4 07       	cpc	r30, r20
 736:	f5 07       	cpc	r31, r21
 738:	98 f0       	brcs	.+38     	; 0x760 <__fp_cmp+0x46>
 73a:	62 1b       	sub	r22, r18
 73c:	73 0b       	sbc	r23, r19
 73e:	84 0b       	sbc	r24, r20
 740:	95 0b       	sbc	r25, r21
 742:	39 f4       	brne	.+14     	; 0x752 <__fp_cmp+0x38>
 744:	0a 26       	eor	r0, r26
 746:	61 f0       	breq	.+24     	; 0x760 <__fp_cmp+0x46>
 748:	23 2b       	or	r18, r19
 74a:	24 2b       	or	r18, r20
 74c:	25 2b       	or	r18, r21
 74e:	21 f4       	brne	.+8      	; 0x758 <__fp_cmp+0x3e>
 750:	08 95       	ret
 752:	0a 26       	eor	r0, r26
 754:	09 f4       	brne	.+2      	; 0x758 <__fp_cmp+0x3e>
 756:	a1 40       	sbci	r26, 0x01	; 1
 758:	a6 95       	lsr	r26
 75a:	8f ef       	ldi	r24, 0xFF	; 255
 75c:	81 1d       	adc	r24, r1
 75e:	81 1d       	adc	r24, r1
 760:	08 95       	ret

00000762 <__tablejump2__>:
 762:	ee 0f       	add	r30, r30
 764:	ff 1f       	adc	r31, r31
 766:	05 90       	lpm	r0, Z+
 768:	f4 91       	lpm	r31, Z
 76a:	e0 2d       	mov	r30, r0
 76c:	09 94       	ijmp

0000076e <_exit>:
 76e:	f8 94       	cli

00000770 <__stop_program>:
 770:	ff cf       	rjmp	.-2      	; 0x770 <__stop_program>
